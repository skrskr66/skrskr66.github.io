<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序程</title>
  
  <subtitle>为了梦想的skr</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://skrskr66.github.io/"/>
  <updated>2018-11-22T12:39:13.934Z</updated>
  <id>https://skrskr66.github.io/</id>
  
  <author>
    <name>Lyc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初阶C-操作符总结</title>
    <link href="https://skrskr66.github.io/2018/11/21/%E5%88%9D%E9%98%B6C-%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://skrskr66.github.io/2018/11/21/初阶C-操作符总结/</id>
    <published>2018-11-21T13:18:49.000Z</published>
    <updated>2018-11-22T12:39:13.934Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em><u>C语言操作符是构成C语言表达式的工具，是说明特别操作的符号。</u></em></strong></p><h2 id="操作符的类型"><a href="#操作符的类型" class="headerlink" title="操作符的类型"></a>操作符的类型</h2><h4 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+        -       *        /       %</span><br></pre></td></tr></table></figure><p>除了%操作符之外，其他均可以作用于整数和浮点数。</p><p>对于/操作符，如果是整数，执行整数除法，如果是浮点数，则执行浮点数除法</p><p>%操作符的两个操作符必须是整数，返回的是整除之后的余数。</p><h4 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;左移操作符 &gt;&gt;右移操作符</span><br></pre></td></tr></table></figure><p>左移位规则：左边抛弃，右边补0</p><p>右移位规则：这又分为两种，分别是逻辑移位和算术移位</p><p>逻辑移位  是左边用0填充，右边丢弃</p><p>算术移位  是左边用原该值的符号位填充，右边丢弃</p><p><strong>例如：求一个整数存储在内存中的二进制中1的个数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">erjinzhi</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (num)&#123;</span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">count++;</span><br><span class="line">num = num / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"二进制中1的个数 = %d "</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个程序里中，我们就可以测出，每个数在二进制中1的个数。但是我们，如果输入负数，我们会发现，我们的程序，是有问题的。如果输入了-10，那么-10之前的所有0都要取反，这个时候我们将出来许多的1。</p><p>所以我们进行一个改正</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">erjingzhi</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (((num &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"二进制中1的个数 = %d\n"</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们利用移位的方法去一个一个来计算。</p><p><img src="/2018/11/21/初阶C-操作符总结/负数二进制.png" alt="负数二进制"></p><p>这里添加一个二进制负数的转化过程，可以更好的理解。</p><p><strong>Ps:注意我们的移位不要移动负数位，这个是标准未定义的。</strong></p><h4 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h4><p>位操作符有三种分别是：按位与，按位或，按位异或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;       |        ^</span><br></pre></td></tr></table></figure><p>它们的操作数必须是整数。</p><p>按位与：对两个数进行操作，然后返回一个新的数，这个数的每个位都需要两个输入数的同一位都为1时才为1.</p><p>按位或：比较两个数，然后返回一个新的数，这个数的每一位设置1的条件是两个输入数的同一位都不为0。即任意一个为1，或者都为1。否则为0。</p><p>按位异或：比较两个数，然后返回一个数，这个数的每个位设为1的条件是两个输入数的同一位不同，如果相同就设为0。即相同为0，不同为1。</p><h4 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h4><p>赋值操作符是一个很好用的操作符，你可以将你的变量设置成你需要的值。用 “=” 即可。</p><h5 id="复合赋值操作符"><a href="#复合赋值操作符" class="headerlink" title="复合赋值操作符"></a>复合赋值操作符</h5><table><thead><tr><th style="text-align:center"><strong>+=</strong></th><th style="text-align:center">加等</th></tr></thead><tbody><tr><td style="text-align:center">-=</td><td style="text-align:center">减等</td></tr><tr><td style="text-align:center">*=</td><td style="text-align:center">乘等</td></tr><tr><td style="text-align:center">/=</td><td style="text-align:center">除等</td></tr><tr><td style="text-align:center">%=</td><td style="text-align:center">取模等</td></tr><tr><td style="text-align:center">&gt;&gt;=</td><td style="text-align:center">右移位等于</td></tr><tr><td style="text-align:center">&lt;&lt;=</td><td style="text-align:center">左移位等于</td></tr><tr><td style="text-align:center">&amp;=</td><td style="text-align:center">按位与等于</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center">=</td><td>按位或等于</td></tr><tr><td style="text-align:center">^=</td><td style="text-align:center">按位取反等于</td></tr></tbody></table><h5 id="单目操作符"><a href="#单目操作符" class="headerlink" title="单目操作符"></a>单目操作符</h5><table><thead><tr><th style="text-align:center">！</th><th style="text-align:center">逻辑反操作</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">取负数</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">取正数</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">取地址</td></tr><tr><td style="text-align:center">sizeof</td><td style="text-align:center">操作数的类型长度</td></tr><tr><td style="text-align:center">~</td><td style="text-align:center">对一个数的二进制按位取反</td></tr><tr><td style="text-align:center">–</td><td style="text-align:center">减减，类似累减</td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">加加，类似累加</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">间接访问操作符</td></tr></tbody></table><h4 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h4><p>逻辑操作符有</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;    逻辑与</span><br><span class="line">||  逻辑或</span><br></pre></td></tr></table></figure><p>它们与按位与和按位或之间的区别</p><p>1&amp;2 —–&gt;0</p><p>1&amp;&amp;2 ——-&gt;1</p><p>1|2 ——&gt;3</p><p>1||2  —–&gt;1</p><p>逻辑与还有逻辑或，此时是判断它的真假性。要记住，非0为真。这是一个关键。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i= <span class="number">0</span>,a=<span class="number">0</span>,b=<span class="number">2</span>,c=<span class="number">3</span>,d=<span class="number">4</span>;</span><br><span class="line">    i= a++&amp;&amp;++b&amp;&amp;d++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a= %d\n b=%d\n c=%d\n d=%d\n"</span>,a,b,c,d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出后，abcd分别位1234。根据我们的猜测，这里可能是为135这样。但是这里有个坑。</p><p>这里存在一个短路求值的知识点。<strong>a=0这就代表了假。那么 a++——&gt;0</strong>。也就是说在这里是<strong>先返回，后++</strong></p><p><u><strong><em>短路求值：如果是&amp;&amp;左侧表达式为假的时候，右侧表达式不会求值</em></strong></u></p><p>​            <u><strong><em>如果是||左侧表达式为真的时候，右侧表达式不会求值</em></strong></u></p><h4 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp1 ? exp2 : exp3</span><br></pre></td></tr></table></figure><p>这是C语言中唯一的一个二目运算符，运算级非常低。</p><h4 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp1,exp2,exp3....expN</span><br></pre></td></tr></table></figure><p>就是用逗号隔开的多个表达式。从左向右依次执行。</p><h4 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h4><h5 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h5><p>C的整型算术运算总是至少以缺省整型类型的精度来进行的。为了获得这个精度，表达式中的字符和短整型操作数在使用之前被转化为普通类型，这种转换称为——整形提升。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a,b,c;</span><br><span class="line">...</span><br><span class="line">a = b + c;</span><br></pre></td></tr></table></figure><p>b和c的值被提升为普通整型，然后再执行加法运算。</p><p>加法运算完成之后，结果将被截断，然后再存储于a中。</p><p>算法运算中，a隐式转换为int。</p><p>凡是针对char/short，此时都隐式转换成int。</p><h4 id="操作符的属性"><a href="#操作符的属性" class="headerlink" title="操作符的属性"></a>操作符的属性</h4><p>复杂表达式的求值有三个影响的因素：</p><p>​    <strong>1.操作符的优先级</strong></p><p>​    <strong>2.操作符的结合性</strong></p><p>​    <strong>3.是否控制求值的顺序</strong></p><p>以上就是操作符的基本了，目前是我能知道并且掌握的，当以后有了其他的之后，再慢慢的添加进去。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;u&gt;C语言操作符是构成C语言表达式的工具，是说明特别操作的符号。&lt;/u&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;操作符的类型&quot;&gt;&lt;a href=&quot;#操作符的类型&quot; class=&quot;headerlink&quot; title=&quot;操作符的类型&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="C初阶" scheme="https://skrskr66.github.io/tags/C%E5%88%9D%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>C初阶-扫雷</title>
    <link href="https://skrskr66.github.io/2018/11/18/C%E5%88%9D%E9%98%B6-%E6%89%AB%E9%9B%B7/"/>
    <id>https://skrskr66.github.io/2018/11/18/C初阶-扫雷/</id>
    <published>2018-11-18T05:14:15.000Z</published>
    <updated>2018-11-19T16:46:36.367Z</updated>
    
    <content type="html"><![CDATA[<p>上次完成了三子棋的做法，利用了二维数组。扫雷也是一样，需要我们利用二维数组去完成。扫雷有所不同的地方在于，我们需要两个二维数组。一个用来展示棋盘，另外一个用于展示我们的下雷过程，因为每一个点击有可能是雷或者不是雷。</p><p>关于扫雷的编程思想我们与三子棋相比是有一些不同的地方。但归途同属，我们只需要想清楚每一个步骤就可以。</p><p>还是先创建一个工程，并且我还是习惯于一个头文件定义函数，一个源文件测试。</p><p>我们首先设置一个选择功能，让我们在看的时候，比较美观。毕竟好看的事务会给别人留下的印象也比较深。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> choice == Menu();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(choice == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Game();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Menu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"====================\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    1.开始游戏\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    2.退出游戏\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"====================\n"</span>);</span><br><span class="line">    <span class="keyword">int</span> choice = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;choice);</span><br><span class="line">    <span class="keyword">return</span> choice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本开始样式就ok了。之后我们开始需要对每个关键步骤写代码了。</p><p>我们先想象一下扫雷的规则与步骤。</p><p>1.我们首先得有一个地图的样式，然后初始化它最初的样子</p><p>2.打印这个棋盘。（这两步与三子棋的思路比较像）</p><p>3.进行点击，之后判断点击的情况。</p><p>4.判定是否踩雷，如果踩雷，GG。</p><p>5.如果没踩雷，判定是否掀开了所有格子。</p><p>6.如果没有掀开所有格子。那么更新周围有几个雷。显示到地图上。</p><p>3-6这是一个循环的过程，所以我们将用while来判断什么时候胜利或者失败。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_ROW 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_COL 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFAULT_LEIZI_COUNT 10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Game</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> show_map[MAX_ROW + <span class="number">2</span>][MAX_COL + <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">char</span> mine_map[MAX_ROW + <span class="number">2</span>][MAX_COL + <span class="number">2</span>];</span><br><span class="line">    Init_map();</span><br><span class="line">    Print_map();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> row,col;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入坐标，例如1 2\n"</span>)；</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;row,&amp;col);</span><br><span class="line">        <span class="keyword">if</span>(row &lt;= <span class="number">0</span> || row &gt; MAX_ROW || col &lt;= <span class="number">0</span> || col &gt; MAX_COL)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"请重新输入坐标\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mine_map[row][col] == <span class="string">'1'</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"游戏结束，此处有雷\n"</span>);</span><br><span class="line">            Print_map();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span> (count==DEFAULT_LEIZI_COUNT + <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"扫雷成功\n"</span>);</span><br><span class="line">Print_map(mine_map);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MAX_ROW; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= MAX_COL; j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (show_map[i][j] == <span class="string">'*'</span>)&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count == DEFAULT_LEIZI_COUNT)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"扫雷成功\n"</span>);</span><br><span class="line">Print_map(mine_map);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">        Updateshowmap();</span><br><span class="line">        Showaround();</span><br><span class="line">        Print_map();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是上面描述的一个基本的流程。也就是扫雷对输赢的判断规则。接着对每一个函数去完善。函数内参数我是没有直接添加进去的。我是都定义完成之后，才慢慢添加进去的。</p><p>首先是对我们地图的一个初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init_map</span><span class="params">(<span class="keyword">char</span> show_map[MAX_ROW + <span class="number">2</span>][MAX_COL + <span class="number">2</span>];</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">char</span> mine_map[MAX_ROW + <span class="number">2</span>][MAX_COL + <span class="number">2</span>])</span></span>&#123;</span><br><span class="line">    <span class="comment">//在这里就要解释一下，我们为什么要加上一个2了。因为我们要保证我们需要一个边框</span></span><br><span class="line">    <span class="comment">//大多数人的潜意识中喜欢输入都是1 1，这样我们定义一个边框，我们就可以将其上下包围这些地图</span></span><br><span class="line">    <span class="comment">//那么这个地图将是从1 1到 10 10的所有点了。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> row = <span class="number">0</span>;row &lt; MAX_ROW;row++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> col = <span class="number">0</span>;col &lt;MAX_COL;col++)&#123;</span><br><span class="line">            show_map[row][col] = <span class="string">'*'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> row = <span class="number">0</span>;row &lt; MAX_ROW;row++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> col = <span class="number">0</span>;col &lt;MAX_COL;col++)&#123;</span><br><span class="line">            mine_map[row][col] = <span class="string">'*'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mine_count = DEFAULT_LEIZI_COUNT;</span><br><span class="line">    <span class="keyword">while</span>(mine_count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> row = rand() % <span class="number">10</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> col = rand() % <span class="number">10</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(mine[row][col] == <span class="string">'1'</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mine[row][col] = <span class="string">'1'</span>;</span><br><span class="line">        mine_count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化完成之后，我们开始打印地图</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_map</span><span class="params">((<span class="keyword">char</span> <span class="built_in">map</span>[MAX_ROW + <span class="number">2</span>][MAX_COL + <span class="number">2</span>],<span class="keyword">int</span> row,<span class="keyword">int</span> col)&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="built_in">printf</span>(<span class="string">"    "</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; MAX_ROW + <span class="number">2</span>;i++)&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,row);</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; MAX_ROW +<span class="number">2</span> ;i++)&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="built_in">printf</span>(<span class="string">"---\n"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">for</span>(<span class="keyword">int</span> row = <span class="number">1</span>;row &lt; MAX_ROW + <span class="number">2</span>;row++)&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="built_in">printf</span>(<span class="string">"%02d |\n"</span>,row);</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">for</span>(<span class="keyword">int</span> col = <span class="number">1</span>;col &lt; MAX_COL + <span class="number">2</span>;col++)&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="built_in">printf</span>(<span class="string">"%c "</span>,<span class="built_in">map</span>[row][col]);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    </span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br></pre></td></tr></table></figure><p>打印完地图之后，就是扫雷中最关键的一个部分了。判断周围雷的个数，然后将它打印到地图中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Updateshowmap</span><span class="params">(<span class="keyword">char</span> show_map[MAX_ROW + <span class="number">2</span>][MAX_COL + <span class="number">2</span>];</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">char</span> mine_map[MAX_ROW + <span class="number">2</span>][MAX_COL + <span class="number">2</span>],<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> leizi_num = (mine_map[row][col + <span class="number">1</span>] - <span class="string">'0'</span>)+</span><br><span class="line">        (mine_map[row][col - <span class="number">1</span>] - <span class="string">'0'</span>)+</span><br><span class="line">        (mine_map[row + <span class="number">1</span>][col + <span class="number">1</span>] - <span class="string">'0'</span>)+</span><br><span class="line">        (mine_map[row + <span class="number">1</span>][col] - <span class="string">'0'</span>)+</span><br><span class="line">        (mine_map[row + <span class="number">1</span>][col - <span class="number">1</span>] - <span class="string">'0'</span>)+</span><br><span class="line">        (mine_map[row - <span class="number">1</span>][col + <span class="number">1</span>] - <span class="string">'0'</span>)+</span><br><span class="line">        (mine_map[row - <span class="number">1</span>][col] - <span class="string">'0'</span>)+</span><br><span class="line">        (mine_map[row - <span class="number">1</span>][col - <span class="number">1</span>] - <span class="string">'0'</span>);</span><br><span class="line">    show_map[row][col] = leizi_num + <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> show_map[row][col];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我是将周围八个格子是否有雷的情况统计下来，然后将其赋给中间的格子，这样我们就可以知道周围有几个雷了。</p><p>我们都知道扫雷的规则，当你点开一部分后，如果周围没雷的话，我们就将会点开空白区域。所以我们要写一个递归来去不断的调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Showaround</span><span class="params">(<span class="keyword">char</span> show_map[MAX_ROW + <span class="number">2</span>][MAX_COL + <span class="number">2</span>],</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">char</span> mine_map[MAX_ROW + <span class="number">2</span>][MAX_COL + <span class="number">2</span>], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mine_map[row][col] == <span class="string">'0'</span> &amp;&amp; show_map[row][col] == <span class="string">'*'</span>)&#123;</span><br><span class="line">show_map[row][col] = Updateshowmap(show_map, mine_map, row, col);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mine_map[row][col - <span class="number">1</span>] == <span class="string">'0'</span> &amp;&amp; show_map[row][col - <span class="number">1</span>]==<span class="string">'*'</span>)&#123;</span><br><span class="line">show_map[row][col - <span class="number">1</span>] = Updateshowmap(show_map, mine_map, row, col - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (Updateshowmap(show_map, mine_map, row, col) == <span class="string">'0'</span>)&#123;</span><br><span class="line">Showaround(show_map, mine_map, row, col - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mine_map[row + <span class="number">1</span>][col] == <span class="string">'0'</span> &amp;&amp; show_map[row + <span class="number">1</span>][col] == <span class="string">'*'</span>)&#123;</span><br><span class="line">show_map[row + <span class="number">1</span>][col] = Updateshowmap(show_map, mine_map, row + <span class="number">1</span>, col);</span><br><span class="line"><span class="keyword">if</span> (Updateshowmap(show_map, mine_map, row + <span class="number">1</span>, col) == <span class="string">'0'</span>)&#123;</span><br><span class="line">Showaround(show_map, mine_map, row + <span class="number">1</span>, col);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mine_map[row - <span class="number">1</span>][col] == <span class="string">'0'</span> &amp;&amp; show_map[row - <span class="number">1</span>][col] == <span class="string">'*'</span>)&#123;</span><br><span class="line">show_map[row - <span class="number">1</span>][col] = Updateshowmap(show_map, mine_map, row - <span class="number">1</span>, col);</span><br><span class="line"><span class="keyword">if</span> (Updateshowmap(show_map, mine_map, row - <span class="number">1</span>, col) == <span class="string">'0'</span>)&#123;</span><br><span class="line">Showaround(show_map, mine_map, row - <span class="number">1</span>, col);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mine_map[row][col + <span class="number">1</span>] == <span class="string">'0'</span> &amp;&amp; show_map[row][col + <span class="number">1</span>] == <span class="string">'*'</span>)&#123;</span><br><span class="line">show_map[row][col + <span class="number">1</span>] = Updateshowmap(show_map, mine_map, row, col + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (Updateshowmap(show_map, mine_map, row, col + <span class="number">1</span>) == <span class="string">'0'</span>)&#123;</span><br><span class="line">Showaround(show_map, mine_map, row, col + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我觉得扫雷对周围的判断是根据上下左右来进行的。如果周围没雷，那么它就是相当于空白的。当分成八个方向去判断时，那么就将产生一键排雷的这种奇葩操作。</p><p>最后就是一个源文件了。将Start（）放入测试即可。但是不要忘了随机种子，否则扫雷的布置雷数是没有变化的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上次完成了三子棋的做法，利用了二维数组。扫雷也是一样，需要我们利用二维数组去完成。扫雷有所不同的地方在于，我们需要两个二维数组。一个用来展示棋盘，另外一个用于展示我们的下雷过程，因为每一个点击有可能是雷或者不是雷。&lt;/p&gt;
&lt;p&gt;关于扫雷的编程思想我们与三子棋相比是有一些不
      
    
    </summary>
    
    
      <category term="C初阶" scheme="https://skrskr66.github.io/tags/C%E5%88%9D%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之动态顺序表</title>
    <link href="https://skrskr66.github.io/2018/11/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8A%A8%E6%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <id>https://skrskr66.github.io/2018/11/15/数据结构之动态顺序表/</id>
    <published>2018-11-15T15:15:52.000Z</published>
    <updated>2018-11-20T10:22:42.372Z</updated>
    
    <content type="html"><![CDATA[<p>动态数据结构是跟静态数据结构大体相似，有些地方是不同的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;动态数据结构是跟静态数据结构大体相似，有些地方是不同的&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="C-数据结构" scheme="https://skrskr66.github.io/tags/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C初阶-三子棋</title>
    <link href="https://skrskr66.github.io/2018/11/12/C%E5%88%9D%E9%98%B6-%E4%B8%89%E5%AD%90%E6%A3%8B/"/>
    <id>https://skrskr66.github.io/2018/11/12/C初阶-三子棋/</id>
    <published>2018-11-12T12:51:57.000Z</published>
    <updated>2018-11-12T13:31:05.714Z</updated>
    
    <content type="html"><![CDATA[<p>今天试着独自完成三子棋，经过一个小时多…才完成。真的太菜了！！！</p><hr><p>但是一个简单的三子棋确实能建立一些基本的编程思想。其中让我迷糊的是和棋那里。接下来我来代码分析说明。</p><p>首先我们编程一个项目时，我们要明白我们的基本构想是什么。那么三子棋的思想有这么几点。</p><h3 id="三子棋的规则"><a href="#三子棋的规则" class="headerlink" title="三子棋的规则"></a>三子棋的规则</h3><p>三子棋是在一个3x3的表格之中，如果在行列斜只要有三个相同的棋子，那么就将获胜。如果棋盘满了之后，但没有相同的，则算和棋。先手是具有一定的优势的。</p><h3 id="三子棋的编程思想"><a href="#三子棋的编程思想" class="headerlink" title="三子棋的编程思想"></a>三子棋的编程思想</h3><p>我们要将我们的操作步骤与实际相比较起来</p><p>1.初始化棋盘</p><p>2.展示棋盘的过程。我们得时刻了解到，此时的下子情况</p><p>3.玩家落子，进行判断，是否赢得了胜利</p><p>4.电脑落子，进行判断，是否赢得了胜利，如果没有分出，重复第2步</p><p>5.还未判断是否分出胜负，对其判断是否和棋。</p><h3 id="三子棋的代码过程"><a href="#三子棋的代码过程" class="headerlink" title="三子棋的代码过程"></a>三子棋的代码过程</h3><p>首先我用的是VS2013，只定义了一个头文件和一个源文件。</p><h5 id="头文件的初定义"><a href="#头文件的初定义" class="headerlink" title="头文件的初定义"></a>头文件的初定义</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROWS 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COLS 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> qipan[ROWS][COLS];</span><br></pre></td></tr></table></figure><p>首先我们定义头文件，不过在此处我觉得并不需要一上来就定义，我们最后需要什么，我们去定义它。</p><p>但是宏最开始我们需要定义好，因为是二维数组。棋盘的大小我们要先设定好，并对其声明。</p><h5 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">char</span> qipan[ROWS][COLS],<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; ROWS; ++row)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; COLS; ++col)&#123;</span><br><span class="line">qipan[row][col] = <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="展示棋盘"><a href="#展示棋盘" class="headerlink" title="展示棋盘"></a>展示棋盘</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show_qipan</span><span class="params">(<span class="keyword">char</span> qipan[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"| %c | %c | %c |\n"</span>, qipan[i][<span class="number">0</span>], </span><br><span class="line">qipan[i][<span class="number">1</span>], qipan[i][<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">if</span> (i != row - <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"|---|---|---|\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="玩家落子"><a href="#玩家落子" class="headerlink" title="玩家落子"></a>玩家落子</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Playmove</span><span class="params">(<span class="keyword">char</span> qipan[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请玩家下子\n"</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"例如输入的格式为0,0\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;row, &amp;col);</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= ROWS || col &lt; <span class="number">0</span> || col &gt;= COLS)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入有误，请重新输入\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (qipan[row][col] != <span class="string">' '</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"该处已经下过子了，请重新输入\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">qipan[row][col] = <span class="string">'x'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="电脑落子"><a href="#电脑落子" class="headerlink" title="电脑落子"></a>电脑落子</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Computermove</span><span class="params">(<span class="keyword">char</span> qipan[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请电脑下子\n"</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">row = rand() % ROWS;</span><br><span class="line">col = rand() % COLS;</span><br><span class="line"><span class="keyword">if</span> (qipan[row][col] != <span class="string">' '</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"该处已有棋子，请重新填入\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">qipan[row][col] = <span class="string">'O'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="和棋判断条件"><a href="#和棋判断条件" class="headerlink" title="和棋判断条件"></a>和棋判断条件</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Show_full</span><span class="params">(<span class="keyword">char</span> qipan[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (qipan[i][j] == <span class="string">' '</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="判断胜负"><a href="#判断胜负" class="headerlink" title="判断胜负"></a>判断胜负</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">CheckWinner</span><span class="params">(<span class="keyword">char</span> qipan[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line"><span class="comment">//判断行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; COLS; col++)&#123;</span><br><span class="line"><span class="keyword">if</span> (qipan[<span class="number">0</span>][col] == qipan[<span class="number">1</span>][col] &amp;&amp; qipan[<span class="number">0</span>][col] == qipan[<span class="number">2</span>][col]</span><br><span class="line">&amp;&amp; qipan[<span class="number">0</span>][col] != <span class="string">' '</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> qipan[<span class="number">0</span>][col];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; ROWS; row++)&#123;</span><br><span class="line"><span class="keyword">if</span> (qipan[row][<span class="number">0</span>] == qipan[row][<span class="number">1</span>] &amp;&amp; qipan[row][<span class="number">0</span>] == qipan[row][<span class="number">2</span>]</span><br><span class="line">&amp;&amp; qipan[row][<span class="number">0</span>] != <span class="string">' '</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> qipan[row][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断斜</span></span><br><span class="line"><span class="keyword">if</span> (qipan[<span class="number">0</span>][<span class="number">0</span>] == qipan[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; qipan[<span class="number">0</span>][<span class="number">0</span>] == qipan[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">&amp;&amp; qipan[<span class="number">0</span>][<span class="number">0</span>] != <span class="string">' '</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> qipan[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (qipan[<span class="number">2</span>][<span class="number">0</span>] == qipan[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; qipan[<span class="number">2</span>][<span class="number">0</span>] == qipan[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">&amp;&amp; qipan[<span class="number">2</span>][<span class="number">0</span>] != <span class="string">' '</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> qipan[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断和棋</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Show_full(qipan,row,col))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'q'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码比较容易理解，但是我们也有几个必须注意的地方。</p><p>首先，定义的每个函数中，参数不能忘，对其中添加数组，行，列三个。因为我们对输入值后，要把每个值传入函数中，让其进行判断。所以这是一个关键。</p><p>其次是和棋的判断，在返回值为0与1的意思是假与真（估计大家都知道），但是关键在于CheckWinner()中，我们要知道判断结束后要有返回值。我们之前设置初始化的数组值是‘ ’。接着我们可以在源文件中进行判断。</p><h5 id="源文件的代码"><a href="#源文件的代码" class="headerlink" title="源文件的代码"></a>源文件的代码</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"chess.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">Init(qipan, ROWS, COLS);</span><br><span class="line">Choice();</span><br><span class="line"><span class="keyword">char</span> winner;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="keyword">switch</span> (a)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">Show_qipan(qipan, ROWS, COLS);</span><br><span class="line">Playmove(qipan, ROWS, COLS);</span><br><span class="line">Show_qipan(qipan, ROWS, COLS);</span><br><span class="line">winner = CheckWinner(qipan, ROWS, COLS);</span><br><span class="line"><span class="keyword">if</span> (winner != <span class="string">' '</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">Computermove(qipan, ROWS, COLS);</span><br><span class="line">winner = CheckWinner(qipan, ROWS, COLS);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (winner == <span class="string">'x'</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"你赢了！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (winner == <span class="string">'o'</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"电脑赢了！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (winner == <span class="string">'q'</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"五五开！真厉害！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">system(<span class="string">"exit"</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了winner的值你就可以看出来，如果之前返回的不是‘ ’，那么winner将直接跳出循环。</p><p>在其中我还添加了一个switch语句增加一些选择来让程序更生动点。下图实例：</p><p><img src="/2018/11/12/C初阶-三子棋/777.png" alt="777"></p><p><img src="/2018/11/12/C初阶-三子棋/666.png" alt="666"></p><p>大家如果有什么想法，还可以自己往里面添加！</p><p>加油！会越来越强的！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天试着独自完成三子棋，经过一个小时多…才完成。真的太菜了！！！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;但是一个简单的三子棋确实能建立一些基本的编程思想。其中让我迷糊的是和棋那里。接下来我来代码分析说明。&lt;/p&gt;
&lt;p&gt;首先我们编程一个项目时，我们要明白我们的基本构想是什么。那么三子棋的
      
    
    </summary>
    
    
      <category term="C初阶" scheme="https://skrskr66.github.io/tags/C%E5%88%9D%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之静态顺序表</title>
    <link href="https://skrskr66.github.io/2018/11/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%9D%99%E6%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <id>https://skrskr66.github.io/2018/11/09/数据结构之静态顺序表/</id>
    <published>2018-11-09T06:21:51.000Z</published>
    <updated>2018-11-10T05:39:23.902Z</updated>
    
    <content type="html"><![CDATA[<p>静态顺序表属于数据结构开始的一种基本结构<br>首先我们要知道<strong>数据结构的概念</strong></p><ol><li>数据结构  数据的组织关系</li><li>算法  为了达到特定的目的的一系列过程。在这个过程中又分为两种角度<br>1） 逻辑角度：<strong>线性结构，树形结构，图形结构</strong><br>2） 存储角度：<strong>顺序存储，链式存储</strong></li></ol><p>在线性结构中顺序存储的方式，在本次中为顺序表，分为静态和动态<br>而静态顺序表的理解可以分为<br>1） 结构体定义（定义、背后的内存布局模型）<br>2） 顺序表的基本操作：<strong>插/删/查/改</strong>。<strong>重点需要去掌握的是插和删</strong>。插（头插/尾插/插入），删（头删/尾删/删除）<br>接下来开始对于整个代码进行一个分析。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;   //一般不着急于先定义一堆，你需要什么在去定义什么。</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;  <span class="comment">//为现有类型创建别名。用DataType来代替int。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE(100) <span class="comment">//开出一块空间，占用内存的最大位置。</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SeqList</span>&#123;</span>     <span class="comment">//定义结构体的别名</span></span><br><span class="line">DataType <span class="built_in">array</span>[MAX_SIZE];  </span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line">&#125;SeqList;   <span class="comment">//变量名</span></span><br></pre></td></tr></table></figure><p>当把结构体都定义好了之后，我们开始先进行两个基本操作，对数组进行初始化和销毁<br>此时我们要用到assert()。在开头首先要定义这个宏#include&lt;assert.h&gt;,他的功能就是测试一个条件可能使程序终止。用法void assert(int test)<br>在初始过程中，可能需要把内存清空一下，所以我们可能需要memset()这个函数。这个函数的用法void <em>memset(void </em>s, int ch, size_t n);<br><strong>将s所指向的某一块内存中的后n个 字节的内容全部设置为ch指定的ASCII值，第一个值为指定的内存地址，块的大小由第三个参数指定，这个函数通常为新申请的内存做初始化工作，其返回值为s。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListInit</span><span class="params">(Seqlist *pSeq)</span></span>&#123;</span><br><span class="line"><span class="comment">//初始化size</span></span><br><span class="line">assert(pSeq != <span class="literal">NULL</span>);</span><br><span class="line">pSep-&gt;size = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(pSep-&gt;<span class="built_in">array</span>,<span class="number">0</span>,SIZE_MAX * <span class="keyword">sizeof</span>(DataType));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListDestory</span><span class="params">(SeqList *pSeq)</span></span>&#123;</span><br><span class="line">assert(pSeq);</span><br><span class="line">pSeq-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还需要部署一个测试函数，先暂时定义一下，当增删改查部署完后，可以往其中添加增删改查的函数来进行实验。</p><h1 id="插入：有头插，尾插，插入"><a href="#插入：有头插，尾插，插入" class="headerlink" title="插入：有头插，尾插，插入"></a>插入：有头插，尾插，插入</h1><h3 id="头插的使用"><a href="#头插的使用" class="headerlink" title="头插的使用"></a>头插的使用</h3><p><strong>PS：考虑完了普通情况后，我们要考虑的是特殊情况，当size超过了定义的最大尺寸情况，我们需要进行一个判断，</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPushTop</span><span class="params">(SeqList *pSeq,DataType data)</span></span>&#123;</span><br><span class="line">    assert(pSeq);</span><br><span class="line">    <span class="keyword">if</span>(pSeq-&gt;size &gt;= MAX_SIZE)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"满了\n"</span>);</span><br><span class="line">        assert(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从最后开始向每一个后面开始搬运，如果不这么做，将会将每一次的值覆盖掉</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pSeq-&gt;szie;i &gt; <span class="number">0</span>; i--)&#123;  <span class="comment">// i此时是定义的为位置,位置为[size,0],从后往前搬</span></span><br><span class="line">        pSeq-&gt;<span class="built_in">array</span>[i] = pSeq-&gt;<span class="built_in">array</span>[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将i定位为数据,位置size[0,size),将整体的位置向后移</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = size - <span class="number">1</span>；i &gt; <span class="number">0</span>;i++)&#123;</span><br><span class="line">        pSeq-&gt;<span class="built_in">array</span>[i + <span class="number">1</span>] = pSeq-&gt;<span class="built_in">array</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    pSeq-&gt;<span class="built_in">array</span>[<span class="number">0</span>]=data;</span><br><span class="line">    pSeq-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个自我思考的图示，仅供参考</p><p><img src="/2018/11/09/数据结构之静态顺序表/数据结构头插.png" alt="数据结构头插"></p><h3 id="尾插的使用"><a href="#尾插的使用" class="headerlink" title="尾插的使用"></a>尾插的使用</h3><p>尾插就相当于正常插入了，这个是比较简单的一种插入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPushBack</span><span class="params">(SeqList *pSeq,DataType data)</span></span>&#123;</span><br><span class="line">    <span class="comment">//还是要先考虑特殊情况</span></span><br><span class="line">    assert(pSeq);</span><br><span class="line">    <span class="keyword">if</span>(pSeq-&gt;size &gt;= MAX_SIZE)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"满了\n"</span>);</span><br><span class="line">        assert(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pSeq-&gt;<span class="built_in">array</span>[pSeq-&gt;size] = data;</span><br><span class="line">    pSeq-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中间插入的使用"><a href="#中间插入的使用" class="headerlink" title="中间插入的使用"></a>中间插入的使用</h3><p>中间插入根据下标来使用，此时这么想，我们先将要插入的地方定义一个pos下标，此时将此下标之后的（包括此下标的）所有数据向后移动。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListInsert</span><span class="params">(SeqList *pSeq,<span class="keyword">int</span> pos, DataType data)</span></span>&#123;</span><br><span class="line">    <span class="comment">//考虑特殊情况</span></span><br><span class="line">        assert(pSeq);</span><br><span class="line">    <span class="keyword">if</span>(pSeq-&gt;size &gt;= MAX_SIZE)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"满了\n"</span>);</span><br><span class="line">        assert(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//此时i作为位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pSeq-&gt;size; i &gt;= pos; i--)&#123;</span><br><span class="line">            pSeq-&gt;<span class="built_in">array</span>[i] = pSeq-&gt;<span class="built_in">array</span>[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时i作为数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pSeq-&gt;size - <span class="number">1</span>;i &gt;= pos; i--)&#123;</span><br><span class="line">            pSeq-&gt;<span class="built_in">array</span>[i + <span class="number">1</span>] = pSeq-&gt;<span class="built_in">array</span>[i]; </span><br><span class="line">        &#125;</span><br><span class="line">        pSeq-&gt;<span class="built_in">array</span>[pos] = data;</span><br><span class="line">        pSeq-&gt;szie++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自我图示，仅供参考</p><p><img src="/2018/11/09/数据结构之静态顺序表/数据结构插入.png" alt="数据结构插入"></p><h1 id="删除：头删，尾删，删除"><a href="#删除：头删，尾删，删除" class="headerlink" title="删除：头删，尾删，删除"></a>删除：头删，尾删，删除</h1><h3 id="头删的使用"><a href="#头删的使用" class="headerlink" title="头删的使用"></a>头删的使用</h3><p>最开始的数删除后，其他的数据向前补进。当然，也别忘了特殊情况！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPushFont</span><span class="params">(SeqList *pSeq)</span></span>&#123;</span><br><span class="line">    <span class="comment">//特殊情况</span></span><br><span class="line">    assert(pSeq)</span><br><span class="line">        <span class="keyword">if</span>(pSeq-&gt;size &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"空了\n"</span>);</span><br><span class="line">            assert(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//i此时为位置时</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pSeq-&gt;size - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        pSeq-&gt;<span class="built_in">array</span>[i] = pSeq-&gt;<span class="built_in">array</span>[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//i此时为数据时</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; pSeq-&gt;size;i++)&#123;</span><br><span class="line">        pSeq-&gt;<span class="built_in">array</span>[i - <span class="number">1</span>] = pSeq-&gt;<span class="built_in">array</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    pSeq-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尾删的使用"><a href="#尾删的使用" class="headerlink" title="尾删的使用"></a>尾删的使用</h3><p>尾删比较简单，也就是直接将最后一个删除</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPushPop</span><span class="params">(SeqList *pSeq)</span></span>&#123;</span><br><span class="line">    assert(pSeq)</span><br><span class="line">        <span class="keyword">if</span>(pSeq-&gt;size &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"空了\n"</span>);</span><br><span class="line">            assert(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    pSeq-&gt;size--;<span class="comment">//直接将空间减小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除的使用"><a href="#删除的使用" class="headerlink" title="删除的使用"></a>删除的使用</h3><p>删除从中间删除，还是定义一个pos下标，删除之后，在将所有数据向前移动</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPushErase</span><span class="params">(SeqList *pSeq,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        assert(pSeq)</span><br><span class="line">        <span class="keyword">if</span>(pSeq-&gt;size &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"空了\n"</span>);</span><br><span class="line">            assert(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pos;i &lt;= pSeq-&gt;size ;i--)&#123;</span><br><span class="line">        pSeq-&gt;<span class="built_in">array</span>[i - <span class="number">1</span>] = pSeq-&gt;<span class="built_in">array</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们基本的这些操作编写完之后，我们需要输出这些数组，来观察。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPrint</span><span class="params">(<span class="keyword">const</span> SeqList *pSeq)</span></span>&#123;</span><br><span class="line">    assert(pSeq != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; pSeq-&gt;size;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,pSeq-&gt;<span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除的第二种形态"><a href="#删除的第二种形态" class="headerlink" title="删除的第二种形态"></a>删除的第二种形态</h3><p>用接口的方式来实现删除。</p><p>接口可以理解为封装一个函数来对其使用。这样我们就可以有一些其他的删除方式</p><h4 id="删除第一个遇到的数据的形式"><a href="#删除第一个遇到的数据的形式" class="headerlink" title="删除第一个遇到的数据的形式"></a>删除第一个遇到的数据的形式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListRemove</span><span class="params">(SeqList *pSeq, DataType data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = SeqListFind(pSeq,data);</span><br><span class="line">    <span class="keyword">if</span>(pos == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="comment">//找不到删除</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SeqListPushErase(pSeq, pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除遇到的所有数据的形式"><a href="#删除遇到的所有数据的形式" class="headerlink" title="删除遇到的所有数据的形式"></a>删除遇到的所有数据的形式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListRemoveALL</span><span class="params">(SeqList *pSeq,DataType data)</span></span>&#123;</span><br><span class="line">    <span class="comment">//第一种方式</span></span><br><span class="line">    <span class="keyword">while</span>(pos = SeqListFind(pSeq,data) != <span class="number">-1</span>)&#123;</span><br><span class="line">        SeqListPushErase(pSeq,data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListRemovALL</span><span class="params">(SeqList *pSeq,DataType data)</span></span>&#123;</span><br><span class="line">    <span class="comment">//第二种方式</span></span><br><span class="line">    <span class="comment">//一次遍历空间，时间快，但是开辟了新空间，空间大小和size有关系</span></span><br><span class="line">    <span class="comment">//开辟一个新空间，遍历原来的数组</span></span><br><span class="line">    <span class="comment">//if arr[i] != data</span></span><br><span class="line">    <span class="comment">//new [j+1]= arr[j+1]</span></span><br><span class="line">    <span class="comment">//else i++</span></span><br><span class="line">    <span class="comment">//把数据在搬回来，还剩的数据个数为i个</span></span><br><span class="line">    DataType *newArray = (DataType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DataType)*pSeq-&gt;size);</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>,j = <span class="number">0</span>;i &lt; pSeq-&gt;size;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data != pSeq-&gt;<span class="built_in">array</span>[i])&#123;</span><br><span class="line">            newArray[j] = pSeq-&gt;<span class="built_in">array</span>[i];</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; j; i++)&#123;</span><br><span class="line">        pSeq-&gt;<span class="built_in">array</span>[i] = newArray[i];</span><br><span class="line">    &#125;</span><br><span class="line">    pSeq-&gt;size = j;</span><br><span class="line">    <span class="built_in">free</span>(newArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListRemoveALL</span><span class="params">(SeqList *pSeq,DataType data)</span></span>&#123;</span><br><span class="line">    <span class="comment">//第三种方法</span></span><br><span class="line">    <span class="comment">//这个方法没有开辟新的空间，直接对其每个所对应的新区域赋值</span></span><br><span class="line">    <span class="comment">//这样我们最后将数组size直接改为新开辟的大小</span></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>,j = <span class="number">0</span>;i &lt; pSeq-&gt;size, i++)&#123;</span><br><span class="line">        pSeq-&gt;<span class="built_in">array</span>[j] = pSeq-&gt;<span class="built_in">array</span>[i];</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    pSeq-&gt;size = j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查找的使用"><a href="#查找的使用" class="headerlink" title="查找的使用"></a>查找的使用</h1><p>查找也是一个关键的选择，因为，在查找到我们需要的下标之后，我们可以对此进行各种增删改操作</p><p>查找也有很多方式，这里先仅做一种顺序遍历查找。查找也有二分查找(前提有序)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqListFind</span><span class="params">(SeqList *pSeq,DataType data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; pSeq-&gt;size;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data = pSeq-&gt;size[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些其他的使用操作"><a href="#一些其他的使用操作" class="headerlink" title="一些其他的使用操作"></a>一些其他的使用操作</h3><p>对于顺序表的操作我们还有一些其他的操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqListSize</span><span class="params">(SeqList *pSeq)</span></span>&#123;</span><br><span class="line">    <span class="comment">//查看当前size的大小</span></span><br><span class="line">    <span class="keyword">return</span> pSeq-&gt;size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqListEmpty</span><span class="params">(SeqList *pSeq)</span></span>&#123;</span><br><span class="line">    <span class="comment">//清空当前数组</span></span><br><span class="line">    <span class="keyword">return</span> pSeq-&gt;size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqListFull</span><span class="params">(SeqList *pSeq)</span></span>&#123;</span><br><span class="line">    <span class="comment">//将数组的size放到最大</span></span><br><span class="line">    <span class="keyword">return</span> pSeq-&gt;size == MAX_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(DataType *a,DataType *b)</span></span>&#123;</span><br><span class="line">    <span class="comment">//交换两个数据</span></span><br><span class="line">    DataType t = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改的使用"><a href="#改的使用" class="headerlink" title="改的使用"></a>改的使用</h3><p>我们可以理解为，我们将要怎么让这个数组去改变，那么我们可以使用排序的方式将数组发生变化。这是一种改法。在静态顺序表中。通过举冒泡排序的例子来使用。</p><p><img src="/2018/11/09/数据结构之静态顺序表/数据结构冒泡排序.png" alt="数据结构冒泡排序"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListBubbleSort</span><span class="params">(SeqList *pSeq)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> isSort;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; pSeq-&gt;size - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        isSort = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; pSeq-&gt;size - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pSeq-&gt;<span class="built_in">array</span>[i] &gt; pSeq-&gt;<span class="built_in">array</span>[i + j])&#123;</span><br><span class="line">                Swap(pSeq-&gt;<span class="built_in">array</span> + j, pSeq-&gt;<span class="built_in">array</span> + j + <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            isSort = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isSort)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里调用冒泡排序的方法是可以进行数组的改变。</p><p>以上就是关于静态顺序数组的基本组成。总的来说，数据结构的难点在于思想过程。怎么把在纸上我们通过绘画的东西，利用代码的形式去表达出来，这是一个很关键的思考过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;静态顺序表属于数据结构开始的一种基本结构&lt;br&gt;首先我们要知道&lt;strong&gt;数据结构的概念&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据结构  数据的组织关系&lt;/li&gt;
&lt;li&gt;算法  为了达到特定的目的的一系列过程。在这个过程中又分为两种角度&lt;br&gt;1） 逻辑角度：
      
    
    </summary>
    
    
      <category term="C-数据结构" scheme="https://skrskr66.github.io/tags/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>初阶C-1107</title>
    <link href="https://skrskr66.github.io/2018/11/08/%E5%88%9D%E9%98%B6C-1107/"/>
    <id>https://skrskr66.github.io/2018/11/08/初阶C-1107/</id>
    <published>2018-11-07T16:46:27.000Z</published>
    <updated>2018-11-07T17:05:45.319Z</updated>
    
    <content type="html"><![CDATA[<p>这次的初阶都是跟C语言中的递归有关的。可以说递归是一个不好理解的，比较抽象的东西。</p><p>递归（Recursion），指在函数的定义中使用函数自身的方法，即程序的自身调用。  </p><p>递归就是方法里调用自身。     </p><p>但是递归的缺陷也是非常大的。在递归调用的过程当中系统为每一层的返回点、局部量等开辟了栈来存储。递归次数过多容易造成栈溢出等，所以一般不提倡用递归算法设计程序。 </p><p>1.递归和非递归分别实现求第n个斐波那契数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用了递归</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Fibonacci(n - <span class="number">1</span>) + Fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不使用递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>, k = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n / <span class="number">2</span>; i++)&#123;</span><br><span class="line">j += k;</span><br><span class="line">k += j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; i++)&#123;</span><br><span class="line">j += k;</span><br><span class="line">k += j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.编写一个函数实现n^k，使用递归实现.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//n^k  如果调用递归，我们先拆分这个算式</span></span><br><span class="line"><span class="comment">//n^k=1,k=0;n^k=n*n^(k-1),k&gt;0</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">index</span><span class="params">(<span class="keyword">double</span> n,<span class="keyword">double</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n*index(n, k - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.写一个递归函数DigitSum(n),输入一个非负整数,返回组成它的数字之和,例如,调用DigitSum(1729)，则应该返回1+7+2+9,它的和是19.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DigitSum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (n != <span class="number">0</span>)&#123;</span><br><span class="line">m = n % <span class="number">10</span>;</span><br><span class="line">n = n / <span class="number">10</span>;</span><br><span class="line">sum = m + DigitSum(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  4.递归和非递归分别实现strlen.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fac</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">j *= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fac1</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a*Fac1(a<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.递归和非递归分别实现求n的阶乘 .</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PrintfNum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">9</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,PrintfNum(n) / <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//逆序实现,非递归</span></span><br><span class="line"><span class="comment">//while (n)&#123;</span></span><br><span class="line"><span class="comment">//m = n % 10;</span></span><br><span class="line"><span class="comment">//n = n / 10;</span></span><br><span class="line"><span class="comment">//printf("%d", m);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.递归方式实现打印一个整数的每一位.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Strlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*str)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'\0'</span> == *str)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+Strlen(str + <span class="number">1</span>);<span class="comment">//这里的+1可以理解成每次进行拆分去算</span></span><br><span class="line">       <span class="comment">//比如“abcd” 先为“a”+“bcd”，第二次在为“b”+“cd”，以此类推</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Strlen2</span><span class="params">(<span class="keyword">char</span> str[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (str[size] != <span class="string">'\0'</span>)&#123;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本次就结束了，还有一个利用递归进行逆序的题，我觉得这道题很不好理解。我将专门写一篇关于这道题目的文章。</p><p>递归的思想是很重要的。我们可以想象成电影《盗梦空间》，一层接着一层的梦境，就好比我们的递归不断的往下进行，只有上一层完成后，才可到下一层。多加练习，多思考，一定会掌握的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这次的初阶都是跟C语言中的递归有关的。可以说递归是一个不好理解的，比较抽象的东西。&lt;/p&gt;
&lt;p&gt;递归（Recursion），指在函数的定义中使用函数自身的方法，即程序的自身调用。  &lt;/p&gt;
&lt;p&gt;递归就是方法里调用自身。     &lt;/p&gt;
&lt;p&gt;但是递归的缺陷也是非常大
      
    
    </summary>
    
    
      <category term="C初阶" scheme="https://skrskr66.github.io/tags/C%E5%88%9D%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>初阶C-1103</title>
    <link href="https://skrskr66.github.io/2018/11/05/%E5%88%9D%E9%98%B6C-1103/"/>
    <id>https://skrskr66.github.io/2018/11/05/初阶C-1103/</id>
    <published>2018-11-05T15:24:13.000Z</published>
    <updated>2018-11-07T16:23:05.356Z</updated>
    
    <content type="html"><![CDATA[<p>1.实现一个函数，打印乘法口诀表，口诀表的行数和列数自己指定，输入9，输出9<em>9口诀表，输入12，输出12</em>12的乘法口诀表。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MultiplicationTable</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">k = j*i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d*%d=%d "</span>, j,i,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.使用函数实现两个数的交换。<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void ChangeNum(int a, int <span class="keyword">b)&#123;</span></span><br><span class="line"><span class="keyword"></span>int temp = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">temp = <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">b </span>= a<span class="comment">;</span></span><br><span class="line">a = temp<span class="comment">;</span></span><br><span class="line">printf(<span class="string">"%d,%d"</span>, a, <span class="keyword">b);</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure></p><p>3.实现一个函数判断year是不是润年。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">LeapYear</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">100</span> == <span class="number">0</span> &amp;&amp; a % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d is LeapYear"</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; a % <span class="number">100</span> != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d is LeapYear"</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Not LeapYear"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.实现一个函数，判断一个数是不是素数。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prime</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"It's a prime"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= a; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (a%i == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"It's a prime"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"It's not a prime"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.创建一个数组,实现函数init()初始化数组、实现empty()清空数组、实现reverse()函数完成数组元素的逆置。 要求：自己设计函数的参数，返回值。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#define size <span class="number">5</span></span><br><span class="line"><span class="comment">//数组初始化 就是定义数组变量的同时给其中的数组元素赋值，由于是给多个元素同时赋值</span></span><br><span class="line">void init()&#123;</span><br><span class="line">int arr[size] = &#123; <span class="number">20</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">75</span>, <span class="number">95</span>, &#125;;</span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">printf(<span class="string">"arr[%d]=%2d <span class="subst">\n</span>"</span>, i, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"<span class="subst">\n</span>"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void empty()&#123;</span><br><span class="line">int arr[<span class="number">5</span>] = &#123; <span class="number">20</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">75</span>, <span class="number">95</span>, &#125;;</span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; (sizeof(arr) / sizeof(arr[<span class="number">0</span>])); i++)&#123;</span><br><span class="line">arr[i] = '\<span class="number">0</span>';</span><br><span class="line">printf(<span class="string">"arr[%d]=%2d <span class="subst">\n</span>"</span>, i, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"<span class="subst">\n</span>"</span>);</span><br><span class="line">&#125;</span><br><span class="line">void reverse()&#123;</span><br><span class="line">int temp = <span class="number">0</span>;</span><br><span class="line">int i = <span class="number">0</span>;</span><br><span class="line">int arr[<span class="number">5</span>] = &#123; <span class="number">20</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">75</span>, <span class="number">95</span>, &#125;;</span><br><span class="line">for (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[<span class="number">4</span> - i];</span><br><span class="line"> arr[<span class="number">4</span> - i] = temp;</span><br><span class="line"> &#125;</span><br><span class="line">for (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">printf(<span class="string">"arr[%d]=%2d <span class="subst">\n</span>"</span>,i, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>前4题很简单，并没有特别大的难度，只要掌握了计算公式，就可以算出。<br>第五题的思路有很多种，这是我目前想出来的一种，初始化和清空比较容易想到。关于逆置，我的方法是比较繁琐的，要根据数组内个数的多少来判断i的取值范围，当然i是可以通过sizeof()来取代的，在此我就不更换了。还有memset()这个函数可以使用，以后我将找机会将其写出。</p><p>欢迎大家留言！我们可以一起讨论</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.实现一个函数，打印乘法口诀表，口诀表的行数和列数自己指定，输入9，输出9&lt;em&gt;9口诀表，输入12，输出12&lt;/em&gt;12的乘法口诀表。&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="C初阶" scheme="https://skrskr66.github.io/tags/C%E5%88%9D%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>初阶C-1101</title>
    <link href="https://skrskr66.github.io/2018/11/04/%E5%88%9D%E9%98%B6C-1101/"/>
    <id>https://skrskr66.github.io/2018/11/04/初阶C-1101/</id>
    <published>2018-11-04T15:18:04.000Z</published>
    <updated>2018-11-04T15:31:06.242Z</updated>
    
    <content type="html"><![CDATA[<p>1.完成猜数字游戏。 </p><p>源文件内需执行的<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入1，开始游戏\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入0，退出游戏\n"</span>);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>)&#123;</span><br><span class="line">Game();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"goodbye!\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请重新输入！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>头文件.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Game</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">result = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入一个数:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line"><span class="keyword">if</span> (num &lt; result)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"lower\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(num &gt; result)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"higher\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (num != result);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"congratulations!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.写代码可以在整型有序数组中查找想要的数字，找到了返回下标，找不到返回-1.（折半查找）<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">void <span class="built_in">find</span>()&#123;</span><br><span class="line"><span class="built_in">int</span> arr[] = &#123; <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span> &#125;;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">right</span> = sizeof(arr) / sizeof(arr[<span class="number">0</span>]) - <span class="number">1</span>;//减一是因为数组下标规则</span><br><span class="line"><span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">mid</span> = (<span class="built_in">left</span> + <span class="built_in">right</span>) / <span class="number">2</span>;</span><br><span class="line">printf(<span class="string">"输入一个数字进行查找："</span>);</span><br><span class="line">scanf(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">while (<span class="built_in">left</span> &lt;= <span class="built_in">right</span>)&#123;//在左边数小于右边数的情况下</span><br><span class="line"><span class="built_in">mid</span> = (<span class="built_in">left</span> + <span class="built_in">right</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">if</span> (arr[<span class="built_in">mid</span>] &lt; i)&#123;</span><br><span class="line"><span class="built_in">left</span> =<span class="built_in">mid</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">else <span class="built_in">if</span>(arr[<span class="built_in">mid</span>] &gt; i)&#123;</span><br><span class="line"><span class="built_in">right</span> = <span class="built_in">mid</span> - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">if</span> (arr[<span class="built_in">mid</span>] == i)&#123;</span><br><span class="line">printf(<span class="string">"%d"</span>, <span class="built_in">mid</span>);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">printf(<span class="string">"-1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.编写代码模拟三次密码输入的场景。 最多能输入三次密码，密码正确，提示“登录成功”,密码错误，可以重新输入，最多输入三次。三次均错，则提示退出程序。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> pass[<span class="number">1024</span>] = &#123;&#125;;</span><br><span class="line"><span class="keyword">char</span> password[] = <span class="string">"123456"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please enter you password:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;pass);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(password, pass) == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome to system!\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="built_in">printf</span>(<span class="string">"sorry,exiting"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.编写一个程序，可以一直接收键盘字符，如果是小写字符就输出对应的大写字符，如果接收的是大写字符，就输出对应的小写字符，如果是数字不输出。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter successively\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)<span class="comment">//永真情况下。永远进行循环。在字符数c为数字时跳出循环。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">c = getchar();<span class="comment">//从控制台读取一个字符，但不显示在屏幕上。</span></span><br><span class="line"><span class="keyword">if</span> (c &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本次作业都是一些关于for和while循环的一些用法。第二题是需要好好思考一下的，难点在于中间值在比较过后，向右还是向左的问题。最后一定要break退出，否则会无法跳出循环。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.完成猜数字游戏。 &lt;/p&gt;
&lt;p&gt;源文件内需执行的&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="C初阶" scheme="https://skrskr66.github.io/tags/C%E5%88%9D%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>初阶C_1030</title>
    <link href="https://skrskr66.github.io/2018/10/31/%E5%88%9D%E9%98%B6C-1030/"/>
    <id>https://skrskr66.github.io/2018/10/31/初阶C-1030/</id>
    <published>2018-10-31T12:33:29.000Z</published>
    <updated>2018-11-07T15:03:38.330Z</updated>
    
    <content type="html"><![CDATA[<p>1.在屏幕上输出一个上下倒三角星形的图案<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">star</span><span class="params">()</span></span>&#123;<span class="comment">//将代码分为上三角和下三角来输出</span></span><br><span class="line"><span class="keyword">int</span> i, j, n = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span> * i - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">6</span>; i &gt; <span class="number">0</span> ; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n-i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; <span class="number">2</span> * i ; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.求出0～999之间的所有“水仙花数”并输出。<br>例如：<br>    153 = 1^3 + 5^3 + 3^3。<br>    370 = 3^3 + 7^3 + 0^3。<br>    371 = 3^3 + 7^3 + 1^3。<br>    407 = 4^3 + 0^3 + 7^3。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">narcissus</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> j, k, l;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">j = i % <span class="number">10</span>;</span><br><span class="line">k = (i / <span class="number">10</span>) % <span class="number">10</span>;</span><br><span class="line">l = i / <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (i == j * j * j + k * k * k + l * l * l )&#123;<span class="comment">//老铁！注意是"=="!!</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.求Sn=a+aa+aaa+aaaa+aaaaa的前5项之和，其中a是一个数字，<br>例如：2+22+222+2222+22222</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">he</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;   <span class="comment">//j每次都是j*10，之后在加上a。</span></span><br><span class="line"><span class="keyword">int</span> Sn = <span class="number">0</span>, i, j;</span><br><span class="line">j = a;      <span class="comment">//j=a，定义在循环之外，a的赋值只在第一次填写参数时。</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">Sn = j+ Sn;</span><br><span class="line">j = j * <span class="number">10</span> + a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, Sn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.在屏幕上输出一个上下倒三角星形的图案&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
      <category term="C初阶" scheme="https://skrskr66.github.io/tags/C%E5%88%9D%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>初阶C_1027</title>
    <link href="https://skrskr66.github.io/2018/10/31/%E5%88%9D%E9%98%B6C-1027/"/>
    <id>https://skrskr66.github.io/2018/10/31/初阶C-1027/</id>
    <published>2018-10-31T12:17:00.000Z</published>
    <updated>2018-10-31T12:31:28.528Z</updated>
    
    <content type="html"><![CDATA[<ol><li>将数组A中的内容和数组B中的内容进行交换。（数组一样大） </li></ol><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void change_num()&#123;</span><br><span class="line">int a[<span class="number">5</span>] = &#123; <span class="number">12</span>, <span class="number">52</span>, <span class="number">36</span>, <span class="number">45</span>, <span class="number">62</span> &#125;;</span><br><span class="line">int b[<span class="number">5</span>] = &#123; <span class="number">21</span>, <span class="number">34</span>, <span class="number">13</span>, <span class="number">24</span>, <span class="number">72</span> &#125;;</span><br><span class="line">int i = <span class="number">0</span>;</span><br><span class="line">int tmp = <span class="number">0</span>;</span><br><span class="line">int sz = sizeof(a) / sizeof(a[<span class="number">0</span>]);<span class="comment">//所有数据的字节数除以一个数据的字节数等于数组的长度</span></span><br><span class="line">for (i = <span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">tmp = a[i];</span><br><span class="line">a[i] = b[i];</span><br><span class="line">b[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">for (i = <span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">printf(<span class="string">"%d,"</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"<span class="subst">\n</span>"</span>);</span><br><span class="line">for (i = <span class="number">0</span>; i &lt; sz; i++)&#123;</span><br><span class="line">printf(<span class="string">"%d,"</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>计算1/1-1/2+1/3-1/4+1/5 …… + 1/99 - 1/100 的值。</li></ol><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void jisuan()&#123;</span><br><span class="line">double i;<span class="comment">//最好改为double类型，因为1/i和1.0/i这两种写法，如果i的类型不同那么得出的答案也不同</span></span><br><span class="line">double sum=<span class="number">0</span>,sum1=<span class="number">0</span>,sum2=<span class="number">0</span>; </span><br><span class="line">for (i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i += <span class="number">2</span>)&#123;</span><br><span class="line">sum1 = sum1 + <span class="number">1</span> / i;</span><br><span class="line">&#125;</span><br><span class="line">for (i = <span class="number">2</span>; i &lt; <span class="number">101</span>; i += <span class="number">2</span>)&#123;</span><br><span class="line">sum2 = sum2 - <span class="number">1</span> / i;</span><br><span class="line">&#125;</span><br><span class="line">sum=sum1+sum2;</span><br><span class="line">printf(<span class="string">"%lf"</span>, sum);<span class="comment">//%f和%lf分别是float类型和double类型用于格式化输入输出时对应的格式符号。</span></span><br><span class="line"><span class="comment">//%lf为双精度浮点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写程序数一下 1到 100 的所有整数中出现多少次数字9。</li></ol><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> js9()&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">101</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> ((i - <span class="number">9</span>) % <span class="number">10</span> == <span class="number">0</span>||i / <span class="number">9</span> == <span class="number">10</span> )&#123;</span><br><span class="line"><span class="keyword">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"%d"</span>, <span class="keyword">count</span>);<span class="comment">//计算出来为19，这是因为99中有两个9存在，所以计算两次。刚开始总以为应该是18...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型与计算公式别混淆，否则很容易代码出问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;将数组A中的内容和数组B中的内容进行交换。（数组一样大） &lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
    
      <category term="C初阶" scheme="https://skrskr66.github.io/tags/C%E5%88%9D%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>初阶C_1025</title>
    <link href="https://skrskr66.github.io/2018/10/31/%E5%88%9D%E9%98%B6%E9%98%B6C-1025/"/>
    <id>https://skrskr66.github.io/2018/10/31/初阶阶C-1025/</id>
    <published>2018-10-31T12:12:27.000Z</published>
    <updated>2018-11-07T15:03:41.412Z</updated>
    
    <content type="html"><![CDATA[<p>#C常见的几种比较<br>我用的VS2013，头文件与源文件分开，在此只贴出函数。</p><p>1.给定两个整形变量的值，将两个值的内容进行交换。 </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void <span class="built_in">compare</span>()&#123;</span><br><span class="line">int a = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">int <span class="keyword">b </span>= <span class="number">20</span><span class="comment">;</span></span><br><span class="line">int tmp = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">tmp = a<span class="comment">;</span></span><br><span class="line">a = <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">b </span>= tmp<span class="comment">;</span></span><br><span class="line">printf(<span class="string">"a=%d,b=%d"</span>, a, <span class="keyword">b);</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure><p>2.不允许创建临时变量，交换两个数的内容</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void compare2()&#123;</span><br><span class="line">int a = <span class="number">20</span><span class="comment">;</span></span><br><span class="line">int <span class="keyword">b </span>= <span class="number">10</span><span class="comment">;</span></span><br><span class="line">a = a - <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">b </span>= a + <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span>a = <span class="keyword">b </span>- a<span class="comment">;</span></span><br><span class="line">printf(<span class="string">"a=%d,b=%d"</span>, a, <span class="keyword">b);</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure><p>3.求10 个整数中最大值。 </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void compare3()&#123;</span><br><span class="line">int a[<span class="number">10</span>] = &#123; <span class="number">12</span>, <span class="number">23</span>, <span class="number">51</span>, <span class="number">5</span>, <span class="number">24</span>, <span class="number">35</span>, <span class="number">62</span>, <span class="number">25</span>, <span class="number">19</span>, <span class="number">60</span> &#125;;</span><br><span class="line">int i;</span><br><span class="line">int max = a[<span class="number">0</span>];</span><br><span class="line">for (i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">if (max &lt; a[i])&#123;</span><br><span class="line">max = a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"最大数为%d"</span>, max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.将三个数按从大到小输出。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void compare4(int a,int <span class="keyword">b,int </span>c)&#123;</span><br><span class="line">int tmp = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">if (a &gt; <span class="keyword">b)&#123;</span></span><br><span class="line"><span class="keyword"></span>tmp = a<span class="comment">;</span></span><br><span class="line">a = <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">b </span>= tmp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">if (<span class="keyword">b </span>&gt; c)&#123;</span><br><span class="line">tmp = <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">b </span>= c<span class="comment">;</span></span><br><span class="line">c = tmp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">if (a &gt; <span class="keyword">b)&#123;</span></span><br><span class="line"><span class="keyword"></span>tmp = a<span class="comment">;</span></span><br><span class="line">a = <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">b </span>= tmp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"这三个数的排序为：%d,%d,%d"</span>, a, <span class="keyword">b, </span>c)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里特别说一下，求最大公约数这用的是相减法，在while语句中，有个特别注意的。a-b的数需要考虑大小的问题，因为一直用大数减小数直到为0.<br>5.求两个数的最大公约数。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void compare5(int a,int <span class="keyword">b)&#123;</span></span><br><span class="line"><span class="keyword"></span>int tmp = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">if (a &lt; <span class="keyword">b)&#123;</span></span><br><span class="line"><span class="keyword"></span>tmp = a<span class="comment">;</span></span><br><span class="line">a = <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">b </span>= tmp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">while (a-<span class="keyword">b!=0)&#123;</span></span><br><span class="line"><span class="keyword"></span>tmp = a - <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span>a = <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">b </span>= tmp<span class="comment">;</span></span><br><span class="line">if (a &lt; <span class="keyword">b)&#123;</span></span><br><span class="line"><span class="keyword"></span>tmp = a<span class="comment">;</span></span><br><span class="line">a = <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">b </span>= tmp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"最大公约数为：%d"</span>, <span class="keyword">b);</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#C常见的几种比较&lt;br&gt;我用的VS2013，头文件与源文件分开，在此只贴出函数。&lt;/p&gt;
&lt;p&gt;1.给定两个整形变量的值，将两个值的内容进行交换。 &lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
      <category term="C初阶" scheme="https://skrskr66.github.io/tags/C%E5%88%9D%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="https://skrskr66.github.io/2018/10/29/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>https://skrskr66.github.io/2018/10/29/新的开始/</id>
    <published>2018-10-29T15:01:35.000Z</published>
    <updated>2018-10-29T16:43:02.870Z</updated>
    
    <content type="html"><![CDATA[<p>  博客今日搭建初步完成，Markdown形式还不知道具体操作，会陆陆续续的进行完善。<br>  说实话，一直就想搭建一个属于自己的博客。就为了能有个属于自己的小天地。<br>  国内也有CSDN，博客园之类的。<br>  但我觉得自己动手的会更好。<br>  当我觉得自己足够强大时，会去尝试WordPress来搭建另外一种博客。<br>  加油！程序程！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  博客今日搭建初步完成，Markdown形式还不知道具体操作，会陆陆续续的进行完善。&lt;br&gt;  说实话，一直就想搭建一个属于自己的博客。就为了能有个属于自己的小天地。&lt;br&gt;  国内也有CSDN，博客园之类的。&lt;br&gt;  但我觉得自己动手的会更好。&lt;br&gt;  当我觉得自己
      
    
    </summary>
    
    
      <category term="程序人生" scheme="https://skrskr66.github.io/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
</feed>
